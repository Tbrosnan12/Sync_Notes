#!/bin/bash


#Usefull  functions 
function pull() {
    status=pulled
    if [ "$check" = true ]; then 
        return 0 
    fi

    if [ "$#" -gt 0 ]; then
        local repo_name=$1 
        echo "repo ${repo_name} is behind origin, pulling..."  
    fi
    git pull origin main --quiet
}

function commit() {
    git add --all > /dev/null
    if [ -z "$commit_message" ]; then
        git commit -m "auto-sync" > /dev/null
    else
        git commit -m "${commit_message}" > /dev/null  #add optional commit message 
    fi
}

function push() {
    status=pushed
    if [ "$check" = true ]; then 
        return 0 
    fi

    if [ "$#" -gt 0 ]; then
        local repo_name=$1
        echo "repo ${repo_name} is ahead of origin, pushing..."     
    fi
    git remote set-url origin git@github.com:${git_username}/${repo_name}.git 
    git push origin main --quiet
}

function fetch() {
    git fetch origin --quiet
}


check=false
excluding_files=()
while getopts "ce:" opt; do
  case $opt in
    c)
      check=true
      ;;
    e)
      while [ $# -gt 0 ]; do
        shift
        if [[ $1 == -* ]]; then
          break
        fi
        excluding_files+=("$1")
      done
      ;;
    \?)
      echo "Usage: $(basename $0) [-c] [-e] [files to exclude]"
      exit 1
      ;;
  esac
done



#Starting script
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Warning: you are not in a git repo directory"
else
    dir=$(git rev-parse --show-toplevel)    #directory of top directory in the git repo tree
    repo_name=$(echo "${dir}" | awk -F '/' '{print $NF}')
    git_username=$(git config user.name)

    #see if there is a file to exclude from adding 
    if [ ${#excluding_files[@]} -ne 0 ]; then
        if [ ! -f ".gitignore" ]; then
            touch $dir/.gitignore
        fi
        for file in "${excluding_files[@]}"; do
            if [ ! -z $file ]; then
                if ! grep -q "$file" "$dir/.gitignore"; then
                    echo "$file" >> "$dir/.gitignore"
                    echo "added $file to .gitignore, it won't be included in future commits"
                fi
            fi      
        done
    fi


    #check if there is a commit message
    commit_message=""
    if [ "$#" -gt 1 ]; then
        for i in $@; do
            commit_message+="${i} "      
        done
    fi

    #Fetch origin to compare 
    fetch

    if git status | grep "nothing to commit" > /dev/null 2>&1; then     # do nothing if nothing to add 
        if git status | grep "up to date with" > /dev/null 2>&1; then    #May be nothing to add, but still be a merger issue 
            status=up_to_date
        elif git status | grep behind > /dev/null 2>&1; then  # pull from origin if behind
            pull "${repo_name}"
        elif git status | grep ahead > /dev/null 2>&1; then  # pull from origin if behind
            push "${repo_name}"   
        else
            status=merger_issue
        fi
    else
        commit
        if git status | grep "diverged" > /dev/null 2>&1; then
            status=merger_issue
        elif git status | grep behind > /dev/null 2>&1; then  # pull from origin if behind
            pull "${repo_name}"
        elif git status | grep "up to date with" > /dev/null 2>&1; then    #Make sure there is no merger issue 
            status=up_to_date
        elif git status | grep ahead > /dev/null 2>&1; then   # push to origin if ahead
            push "${repo_name}"
        else
            echo "This is a never before seen bug please contact the owner of the update repo"
        fi
    fi

    #If we were just checking, undo last commit
    if [ "$check" = true ]; then
        echo "Checked what needs to be done:"
        git reset --soft HEAD~1 > /dev/null 2>&1
    fi

    #echo what has happened :)
    if [ "${status}" = "up_to_date" ]; then
        echo "No updates needed :)"      
    elif [ "$status" = "merger_issue" ]; then
        echo "Uh oh seems there is a merger issue :("         
    else
        if [ "$check" = true ]; then
            if [ "$status"="pulled" ]; then
                echo "repo ${repo_name} is behind origin, need to pull"
            elif [ "$status"="pushed" ]; then
                echo "repo ${repo_name} is ahead origin, need to push"
            fi
        else
            echo "All done!"
        fi    
    fi


    if [ "$status" = "merger_issue" ]; then
        current_branch=$(echo "$(git --no-pager branch)" | awk -F '*' '{print $NF}')
        origin_branch=$(git --no-pager branch -a | grep '\->' | awk -F 'HEAD ->' '{print $NF}')
        
        diff_list=$(git --no-pager diff --name-status ${current_branch} ${origin_branch}| grep -w 'M' | awk -F ' ' '{print $NF}' )
        echo "The following files are divergent between local branch and origin:"
        echo "${diff_list}"

        read -p "Do you want to attempt basic merger? (Y/n) " response
        if [ "$response" != "Y" ]; then
            exit 1
        else
            git config pull.rebase false
            git pull --no-edit origin main --quiet
            if [ $? -ne 0 ]; then
                git pull origin main | grep "CONFLICT"
                echo "Merge unsuccesfull :(" 
            else
                push
                echo "Merge succsessful!"
            fi
        fi 
    fi
fi